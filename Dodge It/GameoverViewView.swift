//
// GameoverViewView.swift
// Generated by Core Animator version 1.2.4 on 11/6/15.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class GameoverViewView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 586, height: 640))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:586, height:640)
		__scaling__.center = CGPoint(x:293.2, y:320.1)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let gameOver1 = UIImageView()
		gameOver1.bounds = CGRect(x:0, y:0, width:1536.0, height:1677.0)
		gameOver1.layer.anchorPoint = CGPoint(x:0.502, y:0.502)
		var imgGameOver1: UIImage!
		if let imagePath = bundle.pathForResource("GameOver1.png", ofType:nil) {
			imgGameOver1 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'GameOver1.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		gameOver1.image = imgGameOver1
		gameOver1.contentMode = .Center;
		gameOver1.layer.position = CGPoint(x:293.894, y:321.362)
		gameOver1.transform = CGAffineTransformMakeScale(0.38, 0.38)
		__scaling__.addSubview(gameOver1)
		viewsByName["GameOver1"] = gameOver1

		let cars = UIView()
		cars.bounds = CGRect(x:0, y:0, width:693.6, height:76.8)
		cars.layer.position = CGPoint(x:293.168, y:193.121)
		__scaling__.addSubview(cars)
		viewsByName["Cars"] = cars

		let ambulance = UIImageView()
		ambulance.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		var imgAmbulance: UIImage!
		if let imagePath = bundle.pathForResource("Ambulance.png", ofType:nil) {
			imgAmbulance = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Ambulance.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		ambulance.image = imgAmbulance
		ambulance.contentMode = .Center;
		ambulance.layer.position = CGPoint(x:670.064, y:26.123)
		ambulance.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.70), 0.20, 0.18)
		cars.addSubview(ambulance)
		viewsByName["Ambulance"] = ambulance

		let audi = UIImageView()
		audi.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		audi.layer.anchorPoint = CGPoint(x:0.547, y:0.518)
		var imgAudi: UIImage!
		if let imagePath = bundle.pathForResource("Audi.png", ofType:nil) {
			imgAudi = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Audi.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		audi.image = imgAudi
		audi.contentMode = .Center;
		audi.layer.position = CGPoint(x:29.324, y:53.705)
		audi.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(1.57), 0.17, 0.17)
		cars.addSubview(audi)
		viewsByName["Audi"] = audi

		let miniTruck = UIImageView()
		miniTruck.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		var imgMiniTruck: UIImage!
		if let imagePath = bundle.pathForResource("Mini_truck.png", ofType:nil) {
			imgMiniTruck = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Mini_truck.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		miniTruck.image = imgMiniTruck
		miniTruck.contentMode = .Center;
		miniTruck.layer.position = CGPoint(x:27.929, y:53.192)
		miniTruck.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(1.57), 0.18, 0.18)
		cars.addSubview(miniTruck)
		viewsByName["Mini_truck"] = miniTruck

		let police = UIImageView()
		police.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		var imgPolice: UIImage!
		if let imagePath = bundle.pathForResource("Police.png", ofType:nil) {
			imgPolice = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Police.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		police.image = imgPolice
		police.contentMode = .Center;
		police.layer.position = CGPoint(x:22.814, y:51.188)
		police.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(1.57), 0.18, 0.18)
		cars.addSubview(police)
		viewsByName["Police"] = police

		let police2 = UIImageView()
		police2.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		police2.layer.anchorPoint = CGPoint(x:0.465, y:0.496)
		police2.image = imgPolice
		police2.contentMode = .Center;
		police2.layer.position = CGPoint(x:668.914, y:28.740)
		police2.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.71), 0.18, 0.18)
		cars.addSubview(police2)
		viewsByName["Police 2"] = police2

		let sign = UIImageView()
		sign.bounds = CGRect(x:0, y:0, width:801.0, height:608.0)
		var imgSign: UIImage!
		if let imagePath = bundle.pathForResource("Sign.png", ofType:nil) {
			imgSign = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Sign.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		sign.image = imgSign
		sign.contentMode = .Center;
		sign.layer.position = CGPoint(x:293.168, y:495.389)
		sign.transform = CGAffineTransformMakeScale(0.38, 0.38)
		__scaling__.addSubview(sign)
		viewsByName["Sign"] = sign

		let letters = UIImageView()
		letters.bounds = CGRect(x:0, y:0, width:1189.0, height:203.0)
		var imgLetters: UIImage!
		if let imagePath = bundle.pathForResource("Letters.png", ofType:nil) {
			imgLetters = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Letters.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		letters.image = imgLetters
		letters.contentMode = .Center;
		letters.layer.position = CGPoint(x:-187.699, y:288.005)
		letters.transform = CGAffineTransformMakeScale(0.32, 0.32)
		__scaling__.addSubview(letters)
		viewsByName["Letters"] = letters

		let taxi = UIImageView()
		taxi.bounds = CGRect(x:0, y:0, width:256.0, height:256.0)
		var imgTaxi: UIImage!
		if let imagePath = bundle.pathForResource("taxi.png", ofType:nil) {
			imgTaxi = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'taxi.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		taxi.image = imgTaxi
		taxi.contentMode = .Center;
		taxi.layer.position = CGPoint(x:280.339, y:-31.615)
		taxi.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(3.13), 0.16, 0.16)
		__scaling__.addSubview(taxi)
		viewsByName["taxi"] = taxi

		self.viewsByName = viewsByName
	}

	// - MARK: Untitled Animation

	func addUntitledAnimation() {
		addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addUntitledAnimation(completion: ((Bool) -> Void)?) {
		addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addUntitledAnimation(removedOnCompletion removedOnCompletion: Bool) {
		addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addUntitledAnimation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addUntitledAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticipateTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 1.00, 1.00)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 15.000
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "UntitledAnimation")
			self.animationCompletions[layer.animationForKey("UntitledAnimation")!] = complete
		}

		let police2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		police2TranslationXAnimation.duration = 15.000
		police2TranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -700.000 as Float]
		police2TranslationXAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		police2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		police2TranslationXAnimation.repeatCount = HUGE
		police2TranslationXAnimation.beginTime = beginTime
		police2TranslationXAnimation.fillMode = fillMode
		police2TranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Police 2"]?.layer.addAnimation(police2TranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let audiTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		audiTranslationXAnimation.duration = 7.500
		audiTranslationXAnimation.values = [0.000 as Float, 639.180 as Float]
		audiTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		audiTranslationXAnimation.timingFunctions = [linearTiming]
		audiTranslationXAnimation.repeatCount = HUGE
		audiTranslationXAnimation.beginTime = beginTime
		audiTranslationXAnimation.fillMode = fillMode
		audiTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Audi"]?.layer.addAnimation(audiTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let miniTruckTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		miniTruckTranslationXAnimation.duration = 13.000
		miniTruckTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 738.000 as Float]
		miniTruckTranslationXAnimation.keyTimes = [0.000 as Float, 0.346 as Float, 1.000 as Float]
		miniTruckTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		miniTruckTranslationXAnimation.repeatCount = HUGE
		miniTruckTranslationXAnimation.beginTime = beginTime
		miniTruckTranslationXAnimation.fillMode = fillMode
		miniTruckTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Mini_truck"]?.layer.addAnimation(miniTruckTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let policeTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		policeTranslationXAnimation.duration = 10.000
		policeTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 700.000 as Float]
		policeTranslationXAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 1.000 as Float]
		policeTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		policeTranslationXAnimation.repeatCount = HUGE
		policeTranslationXAnimation.beginTime = beginTime
		policeTranslationXAnimation.fillMode = fillMode
		policeTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Police"]?.layer.addAnimation(policeTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let lettersScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		lettersScaleXAnimation.duration = 15.000
		lettersScaleXAnimation.values = [0.316 as Float, 0.000 as Float, 0.350 as Float, 0.300 as Float, 0.300 as Float]
		lettersScaleXAnimation.keyTimes = [0.000 as Float, 0.000 as Float, 0.033 as Float, 0.067 as Float, 1.000 as Float]
		lettersScaleXAnimation.timingFunctions = [linearTiming, anticipateTiming, anticOverTiming, linearTiming]
		lettersScaleXAnimation.beginTime = beginTime
		lettersScaleXAnimation.fillMode = fillMode
		lettersScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Letters"]?.layer.addAnimation(lettersScaleXAnimation, forKey:"Untitled Animation_ScaleX")

		let lettersScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		lettersScaleYAnimation.duration = 15.000
		lettersScaleYAnimation.values = [0.316 as Float, 0.000 as Float, 0.350 as Float, 0.300 as Float, 0.300 as Float]
		lettersScaleYAnimation.keyTimes = [0.000 as Float, 0.000 as Float, 0.033 as Float, 0.067 as Float, 1.000 as Float]
		lettersScaleYAnimation.timingFunctions = [linearTiming, anticipateTiming, anticOverTiming, linearTiming]
		lettersScaleYAnimation.beginTime = beginTime
		lettersScaleYAnimation.fillMode = fillMode
		lettersScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Letters"]?.layer.addAnimation(lettersScaleYAnimation, forKey:"Untitled Animation_ScaleY")

		let lettersTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		lettersTranslationXAnimation.duration = 15.000
		lettersTranslationXAnimation.values = [0.000 as Float, 522.977 as Float, 522.977 as Float]
		lettersTranslationXAnimation.keyTimes = [0.000 as Float, 0.000 as Float, 1.000 as Float]
		lettersTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		lettersTranslationXAnimation.beginTime = beginTime
		lettersTranslationXAnimation.fillMode = fillMode
		lettersTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Letters"]?.layer.addAnimation(lettersTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let lettersTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		lettersTranslationYAnimation.duration = 15.000
		lettersTranslationYAnimation.values = [0.000 as Float, -6.898 as Float, -6.898 as Float]
		lettersTranslationYAnimation.keyTimes = [0.000 as Float, 0.000 as Float, 1.000 as Float]
		lettersTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		lettersTranslationYAnimation.beginTime = beginTime
		lettersTranslationYAnimation.fillMode = fillMode
		lettersTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Letters"]?.layer.addAnimation(lettersTranslationYAnimation, forKey:"Untitled Animation_TranslationY")

		let ambulanceTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		ambulanceTranslationXAnimation.duration = 6.500
		ambulanceTranslationXAnimation.values = [0.000 as Float, -738.000 as Float]
		ambulanceTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		ambulanceTranslationXAnimation.timingFunctions = [linearTiming]
		ambulanceTranslationXAnimation.repeatCount = HUGE
		ambulanceTranslationXAnimation.beginTime = beginTime
		ambulanceTranslationXAnimation.fillMode = fillMode
		ambulanceTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ambulance"]?.layer.addAnimation(ambulanceTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let taxiRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		taxiRotationAnimation.duration = 15.000
		taxiRotationAnimation.values = [3.134 as Float, 3.134 as Float, 1.556 as Float, 1.556 as Float]
		taxiRotationAnimation.keyTimes = [0.000 as Float, 0.300 as Float, 0.333 as Float, 1.000 as Float]
		taxiRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		taxiRotationAnimation.beginTime = beginTime
		taxiRotationAnimation.fillMode = fillMode
		taxiRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["taxi"]?.layer.addAnimation(taxiRotationAnimation, forKey:"Untitled Animation_Rotation")

		let taxiTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		taxiTranslationXAnimation.duration = 15.000
		taxiTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 350.000 as Float, 350.000 as Float]
		taxiTranslationXAnimation.keyTimes = [0.000 as Float, 0.300 as Float, 0.567 as Float, 1.000 as Float]
		taxiTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		taxiTranslationXAnimation.beginTime = beginTime
		taxiTranslationXAnimation.fillMode = fillMode
		taxiTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["taxi"]?.layer.addAnimation(taxiTranslationXAnimation, forKey:"Untitled Animation_TranslationX")

		let taxiTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		taxiTranslationYAnimation.duration = 15.000
		taxiTranslationYAnimation.values = [0.000 as Float, 175.000 as Float, 175.000 as Float, 175.000 as Float, 235.000 as Float, 235.000 as Float]
		taxiTranslationYAnimation.keyTimes = [0.000 as Float, 0.200 as Float, 0.233 as Float, 0.300 as Float, 0.333 as Float, 1.000 as Float]
		taxiTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		taxiTranslationYAnimation.beginTime = beginTime
		taxiTranslationYAnimation.fillMode = fillMode
		taxiTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["taxi"]?.layer.addAnimation(taxiTranslationYAnimation, forKey:"Untitled Animation_TranslationY")
	}

	func removeUntitledAnimation() {
		self.layer.removeAnimationForKey("UntitledAnimation")
		self.viewsByName["Police 2"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["Audi"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["Mini_truck"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["Police"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["Letters"]?.layer.removeAnimationForKey("Untitled Animation_ScaleX")
		self.viewsByName["Letters"]?.layer.removeAnimationForKey("Untitled Animation_ScaleY")
		self.viewsByName["Letters"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["Letters"]?.layer.removeAnimationForKey("Untitled Animation_TranslationY")
		self.viewsByName["Ambulance"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["taxi"]?.layer.removeAnimationForKey("Untitled Animation_Rotation")
		self.viewsByName["taxi"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
		self.viewsByName["taxi"]?.layer.removeAnimationForKey("Untitled Animation_TranslationY")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("UntitledAnimation")
	}
}